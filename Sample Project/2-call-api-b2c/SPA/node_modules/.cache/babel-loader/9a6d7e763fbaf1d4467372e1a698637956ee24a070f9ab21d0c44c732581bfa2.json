{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BrowserPerformanceClient = /** @class */function (_super) {\n  __extends(BrowserPerformanceClient, _super);\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n    _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this;\n    // Capture page visibilityState and then invoke start/end measurement\n    var startPageVisibility = this.getPageVisibility();\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function (event) {\n        return inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n      }\n    });\n  };\n  return BrowserPerformanceClient;\n}(PerformanceClient);\nexport { BrowserPerformanceClient };","map":{"version":3,"names":["__extends","BrowserPerformanceClient","_super","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","cryptoOptions","_this","call","browserCrypto","BrowserCrypto","guidGenerator","GuidGenerator","prototype","startPerformanceMeasuremeant","measureName","correlationId","BrowserPerformanceMeasurement","generateId","generateGuid","getPageVisibility","_a","document","visibilityState","toString","startMeasurement","startPageVisibility","inProgressEvent","__assign","endMeasurement","event","endPageVisibility","PerformanceClient"],"sources":["/Users/ling/Desktop/OneCareer/SignUp/2-call-api-b2c/SPA/node_modules/@azure/msal-browser/src/telemetry/BrowserPerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger, PerformanceEvent, PerformanceEvents, IPerformanceClient, PerformanceClient, IPerformanceMeasurement, InProgressPerformanceEvent, ApplicationTelemetry } from \"@azure/msal-common\";\nimport { CryptoOptions } from \"../config/Configuration\";\nimport { BrowserCrypto } from \"../crypto/BrowserCrypto\";\nimport { GuidGenerator } from \"../crypto/GuidGenerator\";\nimport { BrowserPerformanceMeasurement } from \"./BrowserPerformanceMeasurement\";\n\nexport class BrowserPerformanceClient extends PerformanceClient implements IPerformanceClient {\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    \n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry, cryptoOptions: CryptoOptions) {\n        super(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry);\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoOptions);\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    }\n    \n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\n    }\n\n    generateId() : string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    private getPageVisibility(): string | null {\n        return document.visibilityState?.toString() || null;\n    }\n    \n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     * Also captures browser page visibilityState.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n     */\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\n        // Capture page visibilityState and then invoke start/end measurement\n        const startPageVisibility = this.getPageVisibility();\n        \n        const inProgressEvent = super.startMeasurement(measureName, correlationId);\n\n        return {\n            ...inProgressEvent,\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\n                return inProgressEvent.endMeasurement({\n                    startPageVisibility,\n                    endPageVisibility: this.getPageVisibility(),\n                    ...event\n                });\n            }\n        };\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;EAW8CA,SAAA,CAAAC,wBAAA,EAAAC,MAAA;EAI1C,SAAAD,yBAAYE,QAAgB,EAAEC,SAAiB,EAAEC,MAAc,EAAEC,WAAmB,EAAEC,cAAsB,EAAEC,oBAA0C,EAAEC,aAA4B;IAAtL,IAAAC,KAAA,GACIR,MAAA,CAAAS,IAAA,OAAMR,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,EAAEC,cAAc,EAAEC,oBAAoB,CAAC;IACrFE,KAAI,CAACE,aAAa,GAAG,IAAIC,aAAa,CAACH,KAAI,CAACL,MAAM,EAAEI,aAAa,CAAC;IAClEC,KAAI,CAACI,aAAa,GAAG,IAAIC,aAAa,CAACL,KAAI,CAACE,aAAa,CAAC;;;EAG9DX,wBAAA,CAAAe,SAAA,CAAAC,4BAA4B,GAA5B,UAA6BC,WAAmB,EAAEC,aAAqB;IACnE,OAAO,IAAIC,6BAA6B,CAACF,WAAW,EAAEC,aAAa,CAAC;GACvE;EAEDlB,wBAAA,CAAAe,SAAA,CAAAK,UAAU,GAAV;IACI,OAAO,IAAI,CAACP,aAAa,CAACQ,YAAY,EAAE;GAC3C;EAEOrB,wBAAA,CAAAe,SAAA,CAAAO,iBAAiB,GAAzB;;IACI,OAAO,EAAAC,EAAA,GAAAC,QAAQ,CAACC,eAAe,cAAAF,EAAA,uBAAAA,EAAA,CAAEG,QAAQ,OAAM,IAAI;GACtD;;;;;;;;;EAUD1B,wBAAA,CAAAe,SAAA,CAAAY,gBAAgB,GAAhB,UAAiBV,WAA8B,EAAEC,aAAsB;IAAvE,IAAAT,KAAA;;IAEI,IAAMmB,mBAAmB,GAAG,IAAI,CAACN,iBAAiB,EAAE;IAEpD,IAAMO,eAAe,GAAG5B,MAAA,CAAAc,SAAA,CAAMY,gBAAgB,CAAAjB,IAAA,OAACO,WAAW,EAAEC,aAAa,CAAC;IAE1E,OAAAY,QAAA,CAAAA,QAAA,KACOD,eAAe;MAClBE,cAAc,EAAE,SAAAA,CAACC,KAAiC;QAC9C,OAAOH,eAAe,CAACE,cAAc,CAAAD,QAAA;UACjCF,mBAAmB,EAAAA,mBAAA;UACnBK,iBAAiB,EAAExB,KAAI,CAACa,iBAAiB;QAAE,GACxCU,KAAK,EACV;;IACL;GAER;EACL,OAAAhC,wBAAC;AAAD,CA/CA,CAA8CkC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}