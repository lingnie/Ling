{"ast":null,"code":"var _jsxFileName = \"/Users/ling/Desktop/OneCareer/SignUp/2-call-api-b2c/SPA/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { msalConfig } from \"./authConfig.js\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\n\n/**\n* MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders.\n* For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalInstance = new PublicClientApplication(msalConfig);\n\n// Default to using the first account if no account is active on page load\nif (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n  // Account selection logic is app dependent. Adjust as needed for different use cases.\n  msalInstance.setActiveAccount(msalInstance.getAllAccounts()[0]);\n}\nmsalInstance.addEventCallback(event => {\n  if ((event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS || event.eventType === EventType.SSO_SILENT_SUCCESS) && event.payload.account) {\n    msalInstance.setActiveAccount(event.payload.account);\n  }\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(App, {\n      instance: msalInstance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 39,\n  columnNumber: 5\n}, this));","map":{"version":3,"names":["React","ReactDOM","PublicClientApplication","EventType","BrowserRouter","msalConfig","App","jsxDEV","_jsxDEV","msalInstance","getActiveAccount","getAllAccounts","length","setActiveAccount","addEventCallback","event","eventType","LOGIN_SUCCESS","ACQUIRE_TOKEN_SUCCESS","SSO_SILENT_SUCCESS","payload","account","root","createRoot","document","getElementById","render","StrictMode","children","instance","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/ling/Desktop/OneCareer/SignUp/2-call-api-b2c/SPA/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { msalConfig } from \"./authConfig.js\";\nimport App from \"./App\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\n\n/**\n* MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders.\n* For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n*/\nconst msalInstance = new PublicClientApplication(msalConfig);\n\n// Default to using the first account if no account is active on page load\nif (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n    // Account selection logic is app dependent. Adjust as needed for different use cases.\n    msalInstance.setActiveAccount(msalInstance.getAllAccounts()[0]);\n}\n\nmsalInstance.addEventCallback((event) => {\n    if (\n        (event.eventType === EventType.LOGIN_SUCCESS ||\n            event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS ||\n            event.eventType === EventType.SSO_SILENT_SUCCESS) &&\n        event.payload.account\n    ) {\n        msalInstance.setActiveAccount(event.payload.account);\n    }\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App instance={msalInstance} />\n        </BrowserRouter>\n    </React.StrictMode>\n);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,SAASC,uBAAuB,EAAEC,SAAS,QAAQ,qBAAqB;AACxE,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,OAAOC,GAAG,MAAM,OAAO;AAEvB,OAAO,sCAAsC;AAC7C,OAAO,oBAAoB;;AAE3B;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,YAAY,GAAG,IAAIP,uBAAuB,CAACG,UAAU,CAAC;;AAE5D;AACA,IAAI,CAACI,YAAY,CAACC,gBAAgB,CAAC,CAAC,IAAID,YAAY,CAACE,cAAc,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;EAC9E;EACAH,YAAY,CAACI,gBAAgB,CAACJ,YAAY,CAACE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE;AAEAF,YAAY,CAACK,gBAAgB,CAAEC,KAAK,IAAK;EACrC,IACI,CAACA,KAAK,CAACC,SAAS,KAAKb,SAAS,CAACc,aAAa,IACxCF,KAAK,CAACC,SAAS,KAAKb,SAAS,CAACe,qBAAqB,IACnDH,KAAK,CAACC,SAAS,KAAKb,SAAS,CAACgB,kBAAkB,KACpDJ,KAAK,CAACK,OAAO,CAACC,OAAO,EACvB;IACEZ,YAAY,CAACI,gBAAgB,CAACE,KAAK,CAACK,OAAO,CAACC,OAAO,CAAC;EACxD;AACJ,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGrB,QAAQ,CAACsB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEjEH,IAAI,CAACI,MAAM,cACPlB,OAAA,CAACR,KAAK,CAAC2B,UAAU;EAAAC,QAAA,eACbpB,OAAA,CAACJ,aAAa;IAAAwB,QAAA,eACVpB,OAAA,CAACF,GAAG;MAACuB,QAAQ,EAAEpB;IAAa;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACF,CACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}