{"ast":null,"code":"var _jsxFileName = \"/Users/ling/Desktop/OneCareer/SignUp/2-call-api-b2c/SPA/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { Routes, Route } from \"react-router-dom\";\nimport { MsalProvider, useMsal } from '@azure/msal-react';\nimport { EventType } from '@azure/msal-browser';\nimport { PageLayout } from './components/PageLayout';\nimport { TodoList } from './pages/TodoList';\nimport { Home } from './pages/Home';\nimport { b2cPolicies, protectedResources } from './authConfig';\nimport { compareIssuingPolicy } from './utils/claimUtils';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pages = () => {\n  _s();\n  /**\n   * useMsal is hook that returns the PublicClientApplication instance,\n   * an array of all accounts currently signed in and an inProgress value\n   * that tells you what msal is currently doing. For more, visit:\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n   */\n  const {\n    instance\n  } = useMsal();\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(event => {\n      if ((event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) && event.payload.account) {\n        /**\n         * For the purpose of setting an active account for UI update, we want to consider only the auth\n         * response resulting from SUSI flow. \"tfp\" claim in the id token tells us the policy (NOTE: legacy\n         * policies may use \"acr\" instead of \"tfp\"). To learn more about B2C tokens, visit:\n         * https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n         */\n        if (compareIssuingPolicy(event.payload.idTokenClaims, b2cPolicies.names.editProfile)) {\n          // retrieve the account from initial sing-in to the app\n          const originalSignInAccount = instance.getAllAccounts().find(account => account.idTokenClaims.oid === event.payload.idTokenClaims.oid && account.idTokenClaims.sub === event.payload.idTokenClaims.sub && compareIssuingPolicy(account.idTokenClaims, b2cPolicies.names.signUpSignIn));\n          let signUpSignInFlowRequest = {\n            authority: b2cPolicies.authorities.signUpSignIn.authority,\n            account: originalSignInAccount\n          };\n\n          // silently login again with the signUpSignIn policy\n          instance.ssoSilent(signUpSignInFlowRequest);\n        }\n\n        /**\n         * Below we are checking if the user is returning from the reset password flow.\n         * If so, we will ask the user to reauthenticate with their new password.\n         * If you do not want this behavior and prefer your users to stay signed in instead,\n         * you can replace the code below with the same pattern used for handling the return from\n         * profile edit flow\n         */\n        if (compareIssuingPolicy(event.payload.idTokenClaims, b2cPolicies.names.forgotPassword)) {\n          let signUpSignInFlowRequest = {\n            authority: b2cPolicies.authorities.signUpSignIn.authority,\n            scopes: [...protectedResources.apiTodoList.scopes.read, ...protectedResources.apiTodoList.scopes.write]\n          };\n          instance.loginRedirect(signUpSignInFlowRequest);\n        }\n      }\n      if (event.eventType === EventType.LOGIN_FAILURE) {\n        // Check for forgot password error\n        // Learn more about AAD error codes at https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-aadsts-error-codes\n        if (event.error && event.error.errorMessage.includes('AADB2C90118')) {\n          const resetPasswordRequest = {\n            authority: b2cPolicies.authorities.forgotPassword.authority,\n            scopes: []\n          };\n          instance.loginRedirect(resetPasswordRequest);\n        }\n      }\n    });\n    return () => {\n      if (callbackId) {\n        instance.removeEventCallback(callbackId);\n      }\n    };\n    // eslint-disable-next-line\n  }, [instance]);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/todolist\",\n      element: /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n/**\n * msal-react is built on the React context API and all parts of your app that require authentication must be\n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication\n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the\n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\n_s(Pages, \"CyAOT5TCyJmKIwhVlXYy8fh+2P8=\", false, function () {\n  return [useMsal];\n});\n_c = Pages;\nconst App = ({\n  instance\n}) => {\n  return /*#__PURE__*/_jsxDEV(MsalProvider, {\n    instance: instance,\n    children: /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Pages\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useEffect","Routes","Route","MsalProvider","useMsal","EventType","PageLayout","TodoList","Home","b2cPolicies","protectedResources","compareIssuingPolicy","jsxDEV","_jsxDEV","Pages","_s","instance","callbackId","addEventCallback","event","eventType","LOGIN_SUCCESS","ACQUIRE_TOKEN_SUCCESS","payload","account","idTokenClaims","names","editProfile","originalSignInAccount","getAllAccounts","find","oid","sub","signUpSignIn","signUpSignInFlowRequest","authority","authorities","ssoSilent","forgotPassword","scopes","apiTodoList","read","write","loginRedirect","LOGIN_FAILURE","error","errorMessage","includes","resetPasswordRequest","removeEventCallback","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_c2","$RefreshReg$"],"sources":["/Users/ling/Desktop/OneCareer/SignUp/2-call-api-b2c/SPA/src/App.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { Routes, Route } from \"react-router-dom\";\nimport { MsalProvider, useMsal } from '@azure/msal-react';\nimport { EventType } from '@azure/msal-browser';\n\nimport { PageLayout } from './components/PageLayout';\nimport { TodoList } from './pages/TodoList';\nimport { Home } from './pages/Home';\nimport { b2cPolicies, protectedResources } from './authConfig';\nimport { compareIssuingPolicy } from './utils/claimUtils';\n\nimport './styles/App.css';\n\nconst Pages = () => {\n    /**\n     * useMsal is hook that returns the PublicClientApplication instance,\n     * an array of all accounts currently signed in and an inProgress value\n     * that tells you what msal is currently doing. For more, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n     */\n    const { instance } = useMsal();\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((event) => {\n            if (\n                (event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) &&\n                event.payload.account\n            ) {\n                /**\n                 * For the purpose of setting an active account for UI update, we want to consider only the auth\n                 * response resulting from SUSI flow. \"tfp\" claim in the id token tells us the policy (NOTE: legacy\n                 * policies may use \"acr\" instead of \"tfp\"). To learn more about B2C tokens, visit:\n                 * https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n                 */\n                if (compareIssuingPolicy(event.payload.idTokenClaims, b2cPolicies.names.editProfile)) {\n                    // retrieve the account from initial sing-in to the app\n                    const originalSignInAccount = instance\n                        .getAllAccounts()\n                        .find(\n                            (account) =>\n                                account.idTokenClaims.oid === event.payload.idTokenClaims.oid &&\n                                account.idTokenClaims.sub === event.payload.idTokenClaims.sub && \n                                compareIssuingPolicy(account.idTokenClaims, b2cPolicies.names.signUpSignIn)        \n                        );\n\n                    let signUpSignInFlowRequest = {\n                        authority: b2cPolicies.authorities.signUpSignIn.authority,\n                        account: originalSignInAccount,\n                    };\n\n                    // silently login again with the signUpSignIn policy\n                    instance.ssoSilent(signUpSignInFlowRequest);\n                }\n\n                /**\n                 * Below we are checking if the user is returning from the reset password flow.\n                 * If so, we will ask the user to reauthenticate with their new password.\n                 * If you do not want this behavior and prefer your users to stay signed in instead,\n                 * you can replace the code below with the same pattern used for handling the return from\n                 * profile edit flow\n                 */\n                if (compareIssuingPolicy(event.payload.idTokenClaims, b2cPolicies.names.forgotPassword)) {\n                    let signUpSignInFlowRequest = {\n                        authority: b2cPolicies.authorities.signUpSignIn.authority,\n                        scopes: [\n                            ...protectedResources.apiTodoList.scopes.read,\n                            ...protectedResources.apiTodoList.scopes.write,\n                        ],\n                    };\n                    instance.loginRedirect(signUpSignInFlowRequest);\n                }\n            }\n\n            if (event.eventType === EventType.LOGIN_FAILURE) {\n                // Check for forgot password error\n                // Learn more about AAD error codes at https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-aadsts-error-codes\n                if (event.error && event.error.errorMessage.includes('AADB2C90118')) {\n                    const resetPasswordRequest = {\n                        authority: b2cPolicies.authorities.forgotPassword.authority,\n                        scopes: [],\n                    };\n                    instance.loginRedirect(resetPasswordRequest);\n                }\n            }\n        });\n\n        return () => {\n            if (callbackId) {\n                instance.removeEventCallback(callbackId);\n            }\n        };\n        // eslint-disable-next-line\n    }, [instance]);\n\n    return (\n        <Routes>\n            <Route path=\"/todolist\" element={<TodoList />} />\n            <Route path=\"/\" element={<Home />} />\n        </Routes>\n    );\n};\n\n/**\n * msal-react is built on the React context API and all parts of your app that require authentication must be\n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication\n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the\n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nconst App = ({ instance }) => {\n    return (\n        <MsalProvider instance={instance}>\n            <PageLayout>\n                <Pages />\n            </PageLayout>\n        </MsalProvider>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}