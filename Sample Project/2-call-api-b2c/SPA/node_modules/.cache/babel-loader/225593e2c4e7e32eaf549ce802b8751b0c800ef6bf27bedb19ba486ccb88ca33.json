{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { AuthError, PerformanceEvents, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentRefreshClient = /** @class */function (_super) {\n  __extends(SilentRefreshClient, _super);\n  function SilentRefreshClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n  SilentRefreshClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, _a, acquireTokenMeasurement, serverTelemetryManager, refreshTokenClient;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = [__assign({}, request)];\n            return [4 /*yield*/, this.initializeBaseRequest(request)];\n          case 1:\n            silentRequest = __assign.apply(void 0, _a.concat([_b.sent()]));\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4 /*yield*/, this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n          case 2:\n            refreshTokenClient = _b.sent();\n            this.logger.verbose(\"Refresh token client created\");\n            // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: result.fromCache,\n                requestId: result.requestId\n              });\n              return result;\n            }).catch(function (e) {\n              if (e instanceof AuthError) {\n                e.setCorrelationId(_this.correlationId);\n              }\n              serverTelemetryManager.cacheFailedRequest(e);\n              acquireTokenMeasurement.endMeasurement({\n                errorCode: e.errorCode,\n                subErrorCode: e.subError,\n                success: false\n              });\n              throw e;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentRefreshClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n  SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n          case 1:\n            clientConfig = _a.sent();\n            return [2 /*return*/, new RefreshTokenClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n  return SilentRefreshClient;\n}(StandardInteractionClient);\nexport { SilentRefreshClient };","map":{"version":3,"names":["__extends","SilentRefreshClient","_super","prototype","acquireToken","request","initializeBaseRequest","silentRequest","__assign","apply","_a","concat","_b","sent","acquireTokenMeasurement","performanceClient","startMeasurement","PerformanceEvents","SilentRefreshClientAcquireToken","correlationId","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","createRefreshTokenClient","authority","azureCloudOptions","refreshTokenClient","logger","verbose","acquireTokenByRefreshToken","then","result","endMeasurement","success","fromCache","requestId","catch","e","AuthError","setCorrelationId","_this","cacheFailedRequest","errorCode","subErrorCode","subError","logout","Promise","reject","BrowserAuthError","createSilentLogoutUnsupportedError","authorityUrl","getClientConfiguration","clientConfig","RefreshTokenClient","StandardInteractionClient"],"sources":["/Users/ling/Desktop/OneCareer/SignUp/2-call-api-b2c/SPA/node_modules/@azure/msal-browser/src/interaction_client/SilentRefreshClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { CommonSilentFlowRequest, AuthenticationResult, ServerTelemetryManager, RefreshTokenClient, AuthError, AzureCloudOptions, PerformanceEvents } from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request)\n        };\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n\n        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        this.logger.verbose(\"Refresh token client created\");\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return refreshTokenClient.acquireTokenByRefreshToken(silentRequest)\n            .then((result: AuthenticationResult) => {\n                acquireTokenMeasurement.endMeasurement({\n                    success: true,\n                    fromCache: result.fromCache,\n                    requestId: result.requestId\n                });\n\n                return result;\n            })\n            .catch((e: AuthError) => {\n                if (e instanceof AuthError) {\n                    (e as AuthError).setCorrelationId(this.correlationId);\n                }\n                serverTelemetryManager.cacheFailedRequest(e);\n                acquireTokenMeasurement.endMeasurement({\n                    errorCode: e.errorCode,\n                    subErrorCode: e.subError,\n                    success: false\n                });\n                throw e;\n            });\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createRefreshTokenClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<RefreshTokenClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;EAUyCA,SAAA,CAAAC,mBAAA,EAAAC,MAAA;EAAzC,SAAAD,oBAAA;;;;;;;EAKUA,mBAAA,CAAAE,SAAA,CAAAC,YAAY,GAAlB,UAAmBC,OAAgC;;;;;;;+BAExCA,OAAO;YACP,qBAAM,IAAI,CAACC,qBAAqB,CAACD,OAAO,CAAC;;YAF1CE,aAAa,GAAAC,QAAA,CAAAC,KAAA,SAAAC,EAAA,CAAAC,MAAA,EAEZC,EAAA,CAAAC,IAAA,EAAyC,GAC/C;YACKC,uBAAuB,GAAG,IAAI,CAACC,iBAAiB,CAACC,gBAAgB,CAACC,iBAAiB,CAACC,+BAA+B,EAAEX,aAAa,CAACY,aAAa,CAAC;YACjJC,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAACC,KAAK,CAACC,6BAA6B,CAAC;YAE9E,qBAAM,IAAI,CAACC,wBAAwB,CAACJ,sBAAsB,EAAEb,aAAa,CAACkB,SAAS,EAAElB,aAAa,CAACmB,iBAAiB,CAAC;;YAA1IC,kBAAkB,GAAGf,EAAA,CAAAC,IAAA,EAAqH;YAChJ,IAAI,CAACe,MAAM,CAACC,OAAO,CAAC,8BAA8B,CAAC;;YAEnD,sBAAOF,kBAAkB,CAACG,0BAA0B,CAACvB,aAAa,CAAC,CAC9DwB,IAAI,CAAC,UAACC,MAA4B;cAC/BlB,uBAAuB,CAACmB,cAAc,CAAC;gBACnCC,OAAO,EAAE,IAAI;gBACbC,SAAS,EAAEH,MAAM,CAACG,SAAS;gBAC3BC,SAAS,EAAEJ,MAAM,CAACI;eACrB,CAAC;cAEF,OAAOJ,MAAM;aAChB,CAAC,CACDK,KAAK,CAAC,UAACC,CAAY;cAChB,IAAIA,CAAC,YAAYC,SAAS,EAAE;gBACvBD,CAAe,CAACE,gBAAgB,CAACC,KAAI,CAACtB,aAAa,CAAC;;cAEzDC,sBAAsB,CAACsB,kBAAkB,CAACJ,CAAC,CAAC;cAC5CxB,uBAAuB,CAACmB,cAAc,CAAC;gBACnCU,SAAS,EAAEL,CAAC,CAACK,SAAS;gBACtBC,YAAY,EAAEN,CAAC,CAACO,QAAQ;gBACxBX,OAAO,EAAE;eACZ,CAAC;cACF,MAAMI,CAAC;aACV,CAAC;;;;GACT;;;;EAKDrC,mBAAA,CAAAE,SAAA,CAAA2C,MAAM,GAAN;;IAEI,OAAOC,OAAO,CAACC,MAAM,CAACC,gBAAgB,CAACC,kCAAkC,EAAE,CAAC;GAC/E;;;;;;EAOejD,mBAAA,CAAAE,SAAA,CAAAqB,wBAAwB,GAAxC,UAAyCJ,sBAA8C,EAAE+B,YAAqB,EAAEzB,iBAAqC;;;;;;YAE5H,qBAAM,IAAI,CAAC0B,sBAAsB,CAAChC,sBAAsB,EAAE+B,YAAY,EAAEzB,iBAAiB,CAAC;;YAAzG2B,YAAY,GAAG3C,EAAA,CAAAG,IAAA,EAA0F;YAC/G,sBAAO,IAAIyC,kBAAkB,CAACD,YAAY,EAAE,IAAI,CAACtC,iBAAiB,CAAC;;;;GACtE;EACL,OAAAd,mBAAC;AAAD,CA1DA,CAAyCsD,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}