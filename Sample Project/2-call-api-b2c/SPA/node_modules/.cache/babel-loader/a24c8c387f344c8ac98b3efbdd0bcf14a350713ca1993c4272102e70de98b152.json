{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { OIDC_DEFAULT_SCOPES, StringUtils, UrlString, Constants, AuthError, ThrottlingUtils, ProtocolUtils, PerformanceEvents } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserConstants, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar PopupClient = /** @class */function (_super) {\n  __extends(PopupClient, _super);\n  function PopupClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    // Properly sets this reference for the unload event.\n    _this.unloadWindow = _this.unloadWindow.bind(_this);\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n   * @param request\r\n   */\n  PopupClient.prototype.acquireToken = function (request) {\n    try {\n      var popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n      var popupWindowAttributes = request.popupWindowAttributes || {};\n      // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n        // Passes on popup position and dimensions if in request\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before acquiring token.\n        this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n   * @param logoutRequest\r\n   */\n  PopupClient.prototype.logout = function (logoutRequest) {\n    try {\n      this.logger.verbose(\"logoutPopup called\");\n      var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n      var popupName = this.generateLogoutPopupName(validLogoutRequest);\n      var authority = logoutRequest && logoutRequest.authority;\n      var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n      var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {};\n      // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true\");\n        // Passes on popup position and dimensions if in request\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before logging out.\n        this.logger.verbose(\"asyncPopup set to false, opening popup\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n      }\n    } catch (e) {\n      // Since this function is synchronous we need to reject\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param popup\r\n   * @param popupWindowAttributes\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n  PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, validRequest, authCodeRequest, authClient, isNativeBroker, fetchNativeAccountIdMeasurement, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, serverParams, state_1, nativeInteractionClient, userRequestState, result, e_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenPopupAsync called\");\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n            return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Popup)];\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];\n          case 3:\n            authCodeRequest = _a.sent();\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            fetchNativeAccountIdMeasurement = void 0;\n            if (isNativeBroker) {\n              fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: isNativeBroker\n            }))];\n          case 5:\n            navigateUrl = _a.sent();\n            interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger);\n            popupParameters = {\n              popup: popup,\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes\n            };\n            popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4 /*yield*/, this.monitorPopupForHash(popupWindow)];\n          case 6:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state_1 = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId);\n            // Remove throttle if it exists\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n              // end measurement for server call with native brokering enabled\n              if (fetchNativeAccountIdMeasurement) {\n                fetchNativeAccountIdMeasurement.endMeasurement({\n                  success: true,\n                  isNativeBroker: true\n                });\n              }\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state_1).userRequestState;\n              return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, validRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state_1);\n              })];\n            }\n            return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state_1, authClient.authority, this.networkClient)];\n          case 7:\n            result = _a.sent();\n            return [2 /*return*/, result];\n          case 8:\n            e_1 = _a.sent();\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param requestAuthority\r\n   * @param popup\r\n   * @param mainWindowRedirectUri\r\n   * @param popupWindowAttributes\r\n   */\n  PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, authClient, logoutUri, popupWindow, navigationOptions, absoluteUrl, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutPopupAsync called\");\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n            // Clear cache on logout\n            return [4 /*yield*/, this.clearCacheOnLogout(validRequest.account)];\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n            popupWindow = this.openPopup(logoutUri, {\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes,\n              popup: popup\n            });\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4 /*yield*/, this.waitForLogoutPopup(popupWindow)];\n          case 4:\n            _a.sent();\n            if (mainWindowRedirectUri) {\n              navigationOptions = {\n                apiId: ApiId.logoutPopup,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n              };\n              absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n              this.logger.verbose(\"Redirecting main window to url specified in the request\");\n              this.logger.verbosePii(\"Redirecting main window to: \" + absoluteUrl);\n              this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n              this.logger.verbose(\"No main window navigation requested\");\n            }\n            return [3 /*break*/, 6];\n          case 5:\n            e_2 = _a.sent();\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e_2);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            throw e_2;\n          case 6:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n  PopupClient.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      this.logger.infoPii(\"Navigate to: \" + requestUrl);\n      // Open the popup window to requestUrl.\n      return this.openPopup(requestUrl, params);\n    } else {\n      // Throw error if request URL is empty.\n      this.logger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - timeout for processing hash once popup is redirected back to application\r\n   */\n  PopupClient.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      /*\r\n       * Polling for popups needs to be tick-based,\r\n       * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n       */\n      var maxTicks = _this.config.system.windowHashTimeout / _this.config.system.pollIntervalMilliseconds;\n      var ticks = 0;\n      _this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n          _this.cleanPopup();\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n        var href = Constants.EMPTY_STRING;\n        var hash = Constants.EMPTY_STRING;\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n          hash = popupWindow.location.hash;\n        } catch (e) {}\n        // Don't process blank pages or cross domain\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n        _this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n        /*\r\n         * Only run clock when we are on same domain for popups\r\n         * as popup operations can take a long time.\r\n         */\n        ticks++;\n        if (hash) {\n          _this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\n          clearInterval(intervalId);\n          _this.cleanPopup(popupWindow);\n          if (UrlString.hashContainsKnownProperties(hash)) {\n            _this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\n            resolve(hash);\n          } else {\n            _this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\n            _this.logger.errorPii(\"PopupHandler.monitorPopupForHash - hash found: \" + hash);\n            reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n          }\n        } else if (ticks > maxTicks) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorPopupTimeoutError());\n        }\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * Waits for user interaction in logout popup window\r\n   * @param popupWindow\r\n   * @returns\r\n   */\n  PopupClient.prototype.waitForLogoutPopup = function (popupWindow) {\n    var _this = this;\n    return new Promise(function (resolve) {\n      _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\n          _this.cleanPopup();\n          clearInterval(intervalId);\n          resolve();\n        }\n        var href = Constants.EMPTY_STRING;\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {}\n        // Don't process blank pages or cross domain\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n        _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\n        clearInterval(intervalId);\n        _this.cleanPopup(popupWindow);\n        resolve();\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n  PopupClient.prototype.openPopup = function (urlNavigate, popupParams) {\n    try {\n      var popupWindow = void 0;\n      // Popup window passed in, setting url to navigate to\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\n      }\n      // Popup will be null if popups are blocked\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.setInteractionInProgress(false);\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n  PopupClient.prototype.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes) {\n    var _a, _b, _c, _d;\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n    var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\n    var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\n    var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\n    var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\n    if (!width || width < 0 || width > winWidth) {\n      this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n    if (!height || height < 0 || height > winHeight) {\n      this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n    if (!top || top < 0 || top > winHeight) {\n      this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n    if (!left || left < 0 || left > winWidth) {\n      this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n    return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n  PopupClient.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    }\n    // Guarantees browser unload will happen, so no other errors will be thrown.\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n  PopupClient.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    }\n    // Remove window unload function\n    window.removeEventListener(\"beforeunload\", this.unloadWindow);\n    // Interaction is completed - remove interaction status.\n    this.browserStorage.setInteractionInProgress(false);\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n  PopupClient.prototype.generatePopupName = function (scopes, authority) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + scopes.join(\"-\") + \".\" + authority + \".\" + this.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n  PopupClient.prototype.generateLogoutPopupName = function (request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + homeAccountId + \".\" + this.correlationId;\n  };\n  return PopupClient;\n}(StandardInteractionClient);\nexport { PopupClient };","map":{"version":3,"names":["__extends","PopupClient","_super","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_this","call","unloadWindow","bind","nativeStorage","prototype","acquireToken","request","popupName","generatePopupName","scopes","OIDC_DEFAULT_SCOPES","authority","auth","popupWindowAttributes","system","asyncPopups","verbose","acquireTokenPopupAsync","popup","openSizedPopup","e","Promise","reject","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","generateLogoutPopupName","mainWindowRedirectUri","logoutPopupAsync","undefined","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenPopup","initializeAuthorizationRequest","InteractionType","Popup","validRequest","_a","sent","browserStorage","updateCacheEntries","state","nonce","loginHint","Constants","EMPTY_STRING","account","initializeAuthorizationCodeRequest","authCodeRequest","createAuthCodeClient","azureCloudOptions","authClient","isNativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","fetchNativeAccountIdMeasurement","startMeasurement","PerformanceEvents","FetchAccountIdWithNativeBroker","getAuthCodeUrl","__assign","nativeBroker","navigateUrl","interactionHandler","InteractionHandler","popupParameters","popupWindow","initiateAuthRequest","emitEvent","EventType","POPUP_OPENED","monitorPopupForHash","hash","serverParams","UrlString","getDeserializedHash","state_1","validateAndExtractStateFromHash","ThrottlingUtils","removeThrottle","clientId","accountId","endMeasurement","success","BrowserAuthError","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","prompt","finally","cleanRequestByState","handleCodeResponseFromHash","networkClient","result","close","e_1","AuthError","setCorrelationId","cacheFailedRequest","requestAuthority","LOGOUT_START","logoutPopup","clearCacheOnLogout","logoutUri","getLogoutUri","LOGOUT_SUCCESS","openPopup","waitForLogoutPopup","navigationOptions","apiId","timeout","redirectNavigationTimeout","noHistory","absoluteUrl","getAbsoluteUrl","BrowserUtils","getCurrentUri","verbosePii","navigateInternal","e_2","setInteractionInProgress","LOGOUT_FAILURE","LOGOUT_END","requestUrl","params","StringUtils","isEmpty","infoPii","error","createEmptyNavigationUriError","resolve","maxTicks","windowHashTimeout","pollIntervalMilliseconds","ticks","intervalId","setInterval","closed","cleanPopup","clearInterval","createUserCancelledError","href","location","hashContainsKnownProperties","errorPii","createHashDoesNotContainKnownPropertiesError","createMonitorPopupTimeoutError","urlNavigate","popupParams","assign","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","message","createPopupWindowError","toString","winLeft","screenLeft","screenX","winTop","screenTop","screenY","winWidth","innerWidth","document","documentElement","clientWidth","body","winHeight","innerHeight","clientHeight","width","popupSize","height","_b","top","_c","popupPosition","left","_d","BrowserConstants","POPUP_WIDTH","POPUP_HEIGHT","Math","max","open","cleanRequestByInteractionType","preventDefault","removeEventListener","POPUP_NAME_PREFIX","join","homeAccountId","StandardInteractionClient"],"sources":["/Users/ling/Desktop/OneCareer/SignUp/2-call-api-b2c/SPA/node_modules/@azure/msal-browser/src/interaction_client/PopupClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, ThrottlingUtils, CommonEndSessionRequest, UrlString, AuthError, OIDC_DEFAULT_SCOPES, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, PerformanceEvents, StringUtils, IPerformanceClient, Logger, ICrypto } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { EventType } from \"../event/EventType\";\nimport { InteractionType, ApiId, BrowserConstants } from \"../utils/BrowserConstants\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { InteractionHandler, InteractionParams } from \"../interaction_handler/InteractionHandler\";\nimport { PopupWindowAttributes } from \"../request/PopupWindowAttributes\";\n\nexport type PopupParams = InteractionParams & {\n    popup?: Window|null;\n    popupName: string;\n    popupWindowAttributes: PopupWindowAttributes\n};\n\nexport class PopupClient extends StandardInteractionClient {\n    private currentWindow: Window | undefined;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\n     * @param request\n     */\n    acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\n        try {\n            const popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n            const popupWindowAttributes = request.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n\n            const popupName = this.generateLogoutPopupName(validLogoutRequest);\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n            const popupWindowAttributes = logoutRequest?.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\n     * @param validRequest\n     * @param popupName\n     * @param popup\n     * @param popupWindowAttributes\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    protected async acquireTokenPopupAsync(request: PopupRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, popup?: Window|null): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Popup);\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            const isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            // Start measurement for server calls with native brokering enabled\n            let fetchNativeAccountIdMeasurement;\n            if (isNativeBroker) {\n                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: isNativeBroker\n            });\n\n            // Create popup interaction handler.\n            const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger);\n\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupParameters: PopupParams = {\n                popup,\n                popupName,\n                popupWindowAttributes\n            };\n            const popupWindow: Window = this.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\n\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const hash = await this.monitorPopupForHash(popupWindow);\n            // Deserialize hash fragment response parameters.\n            const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n            const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId);\n            // Remove throttle if it exists\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n\n            if (serverParams.accountId) {\n                this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n                // end measurement for server call with native brokering enabled\n                if (fetchNativeAccountIdMeasurement) {\n                    fetchNativeAccountIdMeasurement.endMeasurement({\n                        success: true,\n                        isNativeBroker: true\n                    });\n                }\n\n                if (!this.nativeMessageHandler) {\n                    throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n                }\n                const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n                const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n                return nativeInteractionClient.acquireToken({\n                    ...validRequest,\n                    state: userRequestState,\n                    prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n                }).finally(() => {\n                    this.browserStorage.cleanRequestByState(state);\n                });\n            }\n\n            // Handle response from hash string.\n            const result = await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n\n            return result;\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     *\n     * @param validRequest\n     * @param popupName\n     * @param requestAuthority\n     * @param popup\n     * @param mainWindowRedirectUri\n     * @param popupWindowAttributes\n     */\n    protected async logoutPopupAsync(validRequest: CommonEndSessionRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, requestAuthority?: string, popup?: Window|null, mainWindowRedirectUri?: string): Promise<void> {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n\n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n\n            // Initialize the client\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, requestAuthority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n\n            // Open the popup window to requestUrl.\n            const popupWindow = this.openPopup(logoutUri, {popupName, popupWindowAttributes, popup});\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\n\n            await this.waitForLogoutPopup(popupWindow);\n\n            if (mainWindowRedirectUri) {\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false\n                };\n                const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\n                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\n                this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n    }\n\n    /**\n     * Opens a popup window with given request Url.\n     * @param requestUrl\n     */\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\n        // Check that request url is not empty.\n        if (!StringUtils.isEmpty(requestUrl)) {\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.error(\"Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Monitors a window until it loads a url with the same origin.\n     * @param popupWindow - window that is being monitored\n     * @param timeout - timeout for processing hash once popup is redirected back to application\n     */\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\n        return new Promise((resolve, reject) => {\n            /*\n             * Polling for popups needs to be tick-based,\n             * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\n             */\n            const maxTicks = this.config.system.windowHashTimeout / this.config.system.pollIntervalMilliseconds;\n            let ticks = 0;\n\n            this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n\n            const intervalId = setInterval(() => {\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n                    this.cleanPopup();\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createUserCancelledError());\n                    return;\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                let hash: string = Constants.EMPTY_STRING;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                    hash = popupWindow.location.hash;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n                    return;\n                }\n\n                this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n\n                /*\n                 * Only run clock when we are on same domain for popups\n                 * as popup operations can take a long time.\n                 */\n                ticks++;\n\n                if (hash) {\n                    this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\n                    clearInterval(intervalId);\n                    this.cleanPopup(popupWindow);\n\n                    if (UrlString.hashContainsKnownProperties(hash)) {\n                        this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\n                        resolve(hash);\n                    } else {\n                        this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\n                        this.logger.errorPii(`PopupHandler.monitorPopupForHash - hash found: ${hash}`);\n                        reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n                    }\n                } else if (ticks > maxTicks) {\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createMonitorPopupTimeoutError());\n                }\n            }, this.config.system.pollIntervalMilliseconds);\n        });\n    }\n\n    /**\n     * Waits for user interaction in logout popup window\n     * @param popupWindow\n     * @returns\n     */\n    waitForLogoutPopup(popupWindow: Window): Promise<void> {\n        return new Promise((resolve) => {\n            this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\n\n            const intervalId = setInterval(() => {\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\n                    this.cleanPopup();\n                    clearInterval(intervalId);\n                    resolve();\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n                    return;\n                }\n\n                this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\n\n                clearInterval(intervalId);\n                this.cleanPopup(popupWindow);\n                resolve();\n            }, this.config.system.pollIntervalMilliseconds);\n        });\n    }\n\n    /**\n     * @hidden\n     *\n     * Configures popup window for login.\n     *\n     * @param urlNavigate\n     * @param title\n     * @param popUpWidth\n     * @param popUpHeight\n     * @param popupWindowAttributes\n     * @ignore\n     * @hidden\n     */\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\n            }\n\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw BrowserAuthError.createEmptyWindowCreatedError();\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\n\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\"error opening popup \" + (e as AuthError).message);\n            this.browserStorage.setInteractionInProgress(false);\n            throw BrowserAuthError.createPopupWindowError((e as AuthError).toString());\n        }\n    }\n\n    /**\n     * Helper function to set popup window dimensions and position\n     * @param urlNavigate\n     * @param popupName\n     * @param popupWindowAttributes\n     * @returns\n     */\n    openSizedPopup(urlNavigate: string, popupName: string, popupWindowAttributes: PopupWindowAttributes): Window|null {\n        /**\n         * adding winLeft and winTop to account for dual monitor\n         * using screenLeft and screenTop for IE8 and earlier\n         */\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\n        /**\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\n         * using document.documentElement.clientWidth for IE8 and earlier\n         */\n        const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n\n        if (!width || width < 0 || width > winWidth) {\n            this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n            width = BrowserConstants.POPUP_WIDTH;\n        }\n\n        if (!height || height < 0 || height > winHeight) {\n            this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n            height = BrowserConstants.POPUP_HEIGHT;\n        }\n\n        if (!top || top < 0 || top > winHeight) {\n            this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\n        }\n\n        if (!left || left < 0 || left > winWidth) {\n            this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\n        }\n\n        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\n    }\n\n    /**\n     * Event callback to unload main window.\n     */\n    unloadWindow(e: Event): void {\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n\n    /**\n     * Closes popup, removes any state vars created during popup calls.\n     * @param popupWindow\n     */\n    cleanPopup(popupWindow?: Window): void {\n        if (popupWindow) {\n            // Close window.\n            popupWindow.close();\n        }\n        // Remove window unload function\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request\n     * @param clientId\n     * @param request\n     */\n    generatePopupName(scopes: Array<string>, authority: string): string {\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request for logouts\n     * @param clientId\n     * @param request\n     */\n    generateLogoutPopupName(request: CommonEndSessionRequest): string {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}